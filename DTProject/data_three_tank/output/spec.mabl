simulation 
import BooleanLogic;
import DataWriter;
import DataWriterConfig;
import FMI2;
import FMI2Component;
import Logger;
import Math;
import SimulationControl;
{
 	int status = 0;
	Math math = null;
	Logger logger = null;
	DataWriter dataWriter = null;
	BooleanLogic booleanLogic = null;
	@mapFmu(tank -> "{tank}");
	FMI2 tank = null;
	@mapInstance(tank1 -> "tank1");
	FMI2Component tank1 = null;
	@mapInstance(tank2 -> "tank2");
	FMI2Component tank2 = null;
	@mapInstance(tank3 -> "tank3");
	FMI2Component tank3 = null;
	try 
	{
		math = load("Math");
		if( (((math == null))) )
		{
				error "math IS NULL ";
		}
		logger = load("Logger");
		if( (((logger == null))) )
		{
				error "logger IS NULL ";
		}
		dataWriter = load("DataWriter");
		if( (((dataWriter == null))) )
		{
				error "dataWriter IS NULL ";
		}
		booleanLogic = load("BooleanLogic");
		if( (((booleanLogic == null))) )
		{
				error "booleanLogic IS NULL ";
		}
		tank = load("FMI2", "{1f466342-1fac-4f0f-83ef-558cb55b9503}", "file:/home/santiago/Aarhus/ConfLiftingaaS/DTProject/models/Linear.fmu");
		if( (((tank == null))) )
		{
				error "tank IS NULL ";
		}
		tank1 = tank.instantiate("tank1", false, false);
		if( (((tank1 == null))) )
		{
				error "tank1 IS NULL ";
		}
		tank2 = tank.instantiate("tank2", false, false);
		if( (((tank2 == null))) )
		{
				error "tank2 IS NULL ";
		}
		tank3 = tank.instantiate("tank3", false, false);
		if( (((tank3 == null))) )
		{
				error "tank3 IS NULL ";
		}
		real STEP_SIZE = 0.5;
		real START_TIME = 0.0;
		real END_TIME = 10.0;
		int FMI_OK = 0;
		int FMI_DISCARD = 2;
		int FMI_ERROR = 3;
		int FMI_FATAL = 4;
		BooleanLogic booleanLogic1;
		try 
		{
			booleanLogic1 = load("BooleanLogic");
			if( ((booleanLogic1 == null)) )
			{
					error "Failed load of: booleanLogic1";
			}
			int tank1IntShare[1];
			int tank1IntIo[3];
			int tank3IntIo[3];
			int tank2IntShare[1];
			int tank2IntIo[3];
			real tank3RealIo[3];
			uint tank3UintVref[3];
			real tank2RealIo[3];
			uint tank2UintVref[3];
			real tank1RealIo[3];
			uint tank1UintVref[3];
			real fixed_end_time = 0.0;
			fixed_end_time = END_TIME;
			status = tank1.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'setupExperiment' on 'tank1'";
			}
			status = tank2.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'setupExperiment' on 'tank2'";
			}
			status = tank3.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'setupExperiment' on 'tank3'";
			}
			tank1UintVref[0] = 0;
			tank1RealIo[0] = 2.0;
			status = tank1.setReal(tank1UintVref, 1, tank1RealIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'setReal' on 'tank1'";
			}
			tank2UintVref[0] = 0;
			tank2RealIo[0] = 10.0;
			status = tank2.setReal(tank2UintVref, 1, tank2RealIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'setReal' on 'tank2'";
			}
			tank3UintVref[0] = 0;
			tank3RealIo[0] = 35.0;
			status = tank3.setReal(tank3UintVref, 1, tank3RealIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'setReal' on 'tank3'";
			}
			status = tank1.enterInitializationMode();
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'enterInitializationMode' on 'tank1'";
			}
			status = tank2.enterInitializationMode();
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'enterInitializationMode' on 'tank2'";
			}
			status = tank3.enterInitializationMode();
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'enterInitializationMode' on 'tank3'";
			}
			tank2UintVref[0] = 2;
			status = tank2.getInteger(tank2UintVref, 1, tank2IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'getInteger' on 'tank2'";
			}
			tank2IntShare[0] = tank2IntIo[0];
			tank3UintVref[0] = 0;
			tank3IntIo[0] = tank2IntShare[0];
			status = tank3.setInteger(tank3UintVref, 1, tank3IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'setInteger' on 'tank3'";
			}
			tank1UintVref[0] = 2;
			status = tank1.getInteger(tank1UintVref, 1, tank1IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'getInteger' on 'tank1'";
			}
			tank1IntShare[0] = tank1IntIo[0];
			tank2UintVref[0] = 0;
			tank2IntIo[0] = tank1IntShare[0];
			status = tank2.setInteger(tank2UintVref, 1, tank2IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'setInteger' on 'tank2'";
			}
			status = tank1.exitInitializationMode();
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'exitInitializationMode' on 'tank1'";
			}
			status = tank2.exitInitializationMode();
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'exitInitializationMode' on 'tank2'";
			}
			status = tank3.exitInitializationMode();
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'exitInitializationMode' on 'tank3'";
			}
		}		finally 
		{
			if( ((booleanLogic1 != null)) )
			{
					unload(booleanLogic1);
					booleanLogic1 = null;
			}
		}
		BooleanLogic booleanLogic2;
		DataWriter dataWriter1;
		SimulationControl simulationControl;
		try 
		{
			simulationControl = load("SimulationControl");
			if( ((simulationControl == null)) )
			{
					error "Failed load of: simulationControl";
			}
			dataWriter1 = load("DataWriter");
			if( ((dataWriter1 == null)) )
			{
					error "Failed load of: dataWriter1";
			}
			booleanLogic2 = load("BooleanLogic");
			if( ((booleanLogic2 == null)) )
			{
					error "Failed load of: booleanLogic2";
			}
			bool tank3CurrentTimeFullStep = true;
			real tank3CurrentTime = 0.0;
			bool tank2CurrentTimeFullStep = true;
			real tank2CurrentTime = 0.0;
			bool tank1CurrentTimeFullStep = true;
			real tank1CurrentTime = 0.0;
			int tank3IntShare[3];
			real tank3RealShare[2];
			int tank1IntShare[3];
			real tank1RealShare[2];
			int tank2IntShare[3];
			real tank2RealShare[2];
			real tank3RealIo[3];
			int tank3IntIo[3];
			uint tank3UintVref[3];
			real tank2RealIo[3];
			int tank2IntIo[3];
			uint tank2UintVref[3];
			real tank1RealIo[3];
			int tank1IntIo[3];
			uint tank1UintVref[3];
			real jac_current_step_size = 0.0;
			real jac_step_size = 0.0;
			@TransferAs("START_TIME");
			real jac_current_communication_point = 0.0;
			real jac_end_time = 0.0;
			jac_current_step_size = STEP_SIZE;
			jac_step_size = STEP_SIZE;
			jac_current_communication_point = START_TIME;
			jac_end_time = END_TIME;
			string datawriter_headers[15] = { "{tank}.tank1.level" , "{tank}.tank1.inPort" , "{tank}.tank1.leak" , "{tank}.tank1.der(level)" , "{tank}.tank1.outPort" , "{tank}.tank2.level" , "{tank}.tank2.inPort" , "{tank}.tank2.leak" , "{tank}.tank2.der(level)" , "{tank}.tank2.outPort" , "{tank}.tank3.level" , "{tank}.tank3.inPort" , "{tank}.tank3.leak" , "{tank}.tank3.der(level)" , "{tank}.tank3.outPort" };
			DataWriterConfig datawriter_configuration = dataWriter1.writeHeader(datawriter_headers);
			tank1UintVref[0] = 0;
			tank1UintVref[1] = 1;
			tank1UintVref[2] = 2;
			status = tank1.getInteger(tank1UintVref, 3, tank1IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'getInteger' on 'tank1'";
			}
			tank1UintVref[0] = 0;
			tank1UintVref[1] = 1;
			status = tank1.getReal(tank1UintVref, 2, tank1RealIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", tank1);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", tank1);
					}
					error "Failed to 'getReal' on 'tank1'";
			}
			tank2UintVref[0] = 0;
			tank2UintVref[1] = 1;
			tank2UintVref[2] = 2;
			status = tank2.getInteger(tank2UintVref, 3, tank2IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'getInteger' on 'tank2'";
			}
			tank2UintVref[0] = 0;
			tank2UintVref[1] = 1;
			status = tank2.getReal(tank2UintVref, 2, tank2RealIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", tank2);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", tank2);
					}
					error "Failed to 'getReal' on 'tank2'";
			}
			tank3UintVref[0] = 0;
			tank3UintVref[1] = 1;
			tank3UintVref[2] = 2;
			status = tank3.getInteger(tank3UintVref, 3, tank3IntIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'getInteger' on 'tank3'";
			}
			tank3UintVref[0] = 0;
			tank3UintVref[1] = 1;
			status = tank3.getReal(tank3UintVref, 2, tank3RealIo);
			if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
			{
					if( ((status == FMI_ERROR)) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", tank3);
					}
					if( ((status == FMI_FATAL)) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", tank3);
					}
					error "Failed to 'getReal' on 'tank3'";
			}
			tank2RealShare[0] = tank2RealIo[0];
			tank2RealShare[1] = tank2RealIo[1];
			tank2IntShare[0] = tank2IntIo[0];
			tank2IntShare[1] = tank2IntIo[1];
			tank2IntShare[2] = tank2IntIo[2];
			tank1RealShare[0] = tank1RealIo[0];
			tank1RealShare[1] = tank1RealIo[1];
			tank1IntShare[0] = tank1IntIo[0];
			tank1IntShare[1] = tank1IntIo[1];
			tank1IntShare[2] = tank1IntIo[2];
			tank3RealShare[0] = tank3RealIo[0];
			tank3RealShare[1] = tank3RealIo[1];
			tank3IntShare[0] = tank3IntIo[0];
			tank3IntShare[1] = tank3IntIo[1];
			tank3IntShare[2] = tank3IntIo[2];
			real fmu_communicationpoints[3];
			dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, tank1RealShare[0], tank1IntShare[0], tank1IntShare[1], tank1RealShare[1], tank1IntShare[2], tank2RealShare[0], tank2IntShare[0], tank2IntShare[1], tank2RealShare[1], tank2IntShare[2], tank3RealShare[0], tank3IntShare[0], tank3IntShare[1], tank3RealShare[1], tank3IntShare[2]);
			bool any_discards = false;
			while( (((jac_current_communication_point + jac_current_step_size) < jac_end_time)) )
			{
				bool tmp = simulationControl.stopRequested();
				if( ((tmp)) )
				{
						error "Simulation stopped by user";
				}
				@Transfer();
				tank2UintVref[0] = 0;
				tank2IntIo[0] = tank1IntShare[2];
				status = tank2.setInteger(tank2UintVref, 1, tank2IntIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", tank2);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", tank2);
						}
						error "Failed to 'setInteger' on 'tank2'";
				}
				tank3UintVref[0] = 0;
				tank3IntIo[0] = tank2IntShare[2];
				status = tank3.setInteger(tank3UintVref, 1, tank3IntIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", tank3);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", tank3);
						}
						error "Failed to 'setInteger' on 'tank3'";
				}
				any_discards = false;
				status = tank1.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", tank1);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", tank1);
						}
						error "Failed to 'doStep' on 'tank1'";
				}
				if( ((status != FMI_OK)) )
				{
						if( ((status == FMI_DISCARD)) )
						{
								status = tank1.getRealStatus(2, ref tank1CurrentTime);
								tank1CurrentTimeFullStep = false;
						}
				}
				else
				{
						tank1CurrentTime = jac_current_communication_point + jac_current_step_size;
						tank1CurrentTimeFullStep = true;
				}
				fmu_communicationpoints[0] = tank1CurrentTime;
				if( ((!tank1CurrentTimeFullStep)) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "tank1", jac_current_communication_point, jac_current_step_size, tank1CurrentTime);
						any_discards = any_discards || !tank1CurrentTimeFullStep;
				}
				status = tank2.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", tank2);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", tank2);
						}
						error "Failed to 'doStep' on 'tank2'";
				}
				if( ((status != FMI_OK)) )
				{
						if( ((status == FMI_DISCARD)) )
						{
								status = tank2.getRealStatus(2, ref tank2CurrentTime);
								tank2CurrentTimeFullStep = false;
						}
				}
				else
				{
						tank2CurrentTime = jac_current_communication_point + jac_current_step_size;
						tank2CurrentTimeFullStep = true;
				}
				fmu_communicationpoints[1] = tank2CurrentTime;
				if( ((!tank2CurrentTimeFullStep)) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "tank2", jac_current_communication_point, jac_current_step_size, tank2CurrentTime);
						any_discards = any_discards || !tank2CurrentTimeFullStep;
				}
				status = tank3.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", tank3);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", tank3);
						}
						error "Failed to 'doStep' on 'tank3'";
				}
				if( ((status != FMI_OK)) )
				{
						if( ((status == FMI_DISCARD)) )
						{
								status = tank3.getRealStatus(2, ref tank3CurrentTime);
								tank3CurrentTimeFullStep = false;
						}
				}
				else
				{
						tank3CurrentTime = jac_current_communication_point + jac_current_step_size;
						tank3CurrentTimeFullStep = true;
				}
				fmu_communicationpoints[2] = tank3CurrentTime;
				if( ((!tank3CurrentTimeFullStep)) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "tank3", jac_current_communication_point, jac_current_step_size, tank3CurrentTime);
						any_discards = any_discards || !tank3CurrentTimeFullStep;
				}
				tank2UintVref[0] = 0;
				tank2UintVref[1] = 1;
				tank2UintVref[2] = 2;
				status = tank2.getInteger(tank2UintVref, 3, tank2IntIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank2);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank2);
						}
						error "Failed to 'getInteger' on 'tank2'";
				}
				tank2UintVref[0] = 0;
				tank2UintVref[1] = 1;
				status = tank2.getReal(tank2UintVref, 2, tank2RealIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", tank2);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", tank2);
						}
						error "Failed to 'getReal' on 'tank2'";
				}
				tank1UintVref[0] = 0;
				tank1UintVref[1] = 1;
				tank1UintVref[2] = 2;
				status = tank1.getInteger(tank1UintVref, 3, tank1IntIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank1);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank1);
						}
						error "Failed to 'getInteger' on 'tank1'";
				}
				tank1UintVref[0] = 0;
				tank1UintVref[1] = 1;
				status = tank1.getReal(tank1UintVref, 2, tank1RealIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", tank1);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", tank1);
						}
						error "Failed to 'getReal' on 'tank1'";
				}
				tank3UintVref[0] = 0;
				tank3UintVref[1] = 1;
				tank3UintVref[2] = 2;
				status = tank3.getInteger(tank3UintVref, 3, tank3IntIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_ERROR", tank3);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "GetInteger failed on '%s' with status: FMI_FATAL", tank3);
						}
						error "Failed to 'getInteger' on 'tank3'";
				}
				tank3UintVref[0] = 0;
				tank3UintVref[1] = 1;
				status = tank3.getReal(tank3UintVref, 2, tank3RealIo);
				if( (((status == FMI_ERROR) || (status == FMI_FATAL))) )
				{
						if( ((status == FMI_ERROR)) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", tank3);
						}
						if( ((status == FMI_FATAL)) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", tank3);
						}
						error "Failed to 'getReal' on 'tank3'";
				}
				tank2RealShare[0] = tank2RealIo[0];
				tank2RealShare[1] = tank2RealIo[1];
				tank2IntShare[0] = tank2IntIo[0];
				tank2IntShare[1] = tank2IntIo[1];
				tank2IntShare[2] = tank2IntIo[2];
				tank1RealShare[0] = tank1RealIo[0];
				tank1RealShare[1] = tank1RealIo[1];
				tank1IntShare[0] = tank1IntIo[0];
				tank1IntShare[1] = tank1IntIo[1];
				tank1IntShare[2] = tank1IntIo[2];
				tank3RealShare[0] = tank3RealIo[0];
				tank3RealShare[1] = tank3RealIo[1];
				tank3IntShare[0] = tank3IntIo[0];
				tank3IntShare[1] = tank3IntIo[1];
				tank3IntShare[2] = tank3IntIo[2];
				if( ((!any_discards)) )
				{
						jac_current_communication_point = jac_current_communication_point + jac_current_step_size;
						dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, tank1RealShare[0], tank1IntShare[0], tank1IntShare[1], tank1RealShare[1], tank1IntShare[2], tank2RealShare[0], tank2IntShare[0], tank2IntShare[1], tank2RealShare[1], tank2IntShare[2], tank3RealShare[0], tank3IntShare[0], tank3IntShare[1], tank3RealShare[1], tank3IntShare[2]);
						jac_current_step_size = jac_step_size;
				}
			}
			dataWriter1.close();
		}		finally 
		{
			if( ((simulationControl != null)) )
			{
					unload(simulationControl);
					simulationControl = null;
			}
			if( ((dataWriter1 != null)) )
			{
					unload(dataWriter1);
					dataWriter1 = null;
			}
			if( ((booleanLogic2 != null)) )
			{
					unload(booleanLogic2);
					booleanLogic2 = null;
			}
		}
		tank1.terminate();
		tank2.terminate();
		tank3.terminate();
	}	finally 
	{
		if( (((tank1 != null))) )
		{
				tank.freeInstance(tank1);
				tank1 = null;
		}
		if( (((tank2 != null))) )
		{
				tank.freeInstance(tank2);
				tank2 = null;
		}
		if( (((tank3 != null))) )
		{
				tank.freeInstance(tank3);
				tank3 = null;
		}
		if( (((tank != null))) )
		{
				unload(tank);
				tank = null;
		}
		if( (((math != null))) )
		{
				unload(math);
				math = null;
		}
		if( (((logger != null))) )
		{
				unload(logger);
				logger = null;
		}
		if( (((dataWriter != null))) )
		{
				unload(dataWriter);
				dataWriter = null;
		}
		if( (((booleanLogic != null))) )
		{
				unload(booleanLogic);
				booleanLogic = null;
		}
	}
}